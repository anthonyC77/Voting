{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","Voting","show","isOwner","currentAccount","adminAdress","stateVote","winnerProposal","proposals","addressVote","proposalVote","chosenProposal","componentWillMount","eth","getAccounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","methods","getOwner","call","adminAdressLower","toString","toLowerCase","userAdress","setState","runExample","runInit","CheckOwnerWhenAccountChanged","alert","error","setCurrentAccount","CheckIfOwner","on","getAddressCount","countAdress","i","getAddress","adress","push","events","VoterRegistered","event","subscriptionId","receipt","runVoteTalliedEnded","winner","value","runVoteTallied","UsersGetWinningProposal","winnerVote","AdminVoteRegisterAdress","send","from","StopProposal","AdminActions","StartProposal","StopVote","StartVote","Proposal","userAddress","proposition","UsersProposalsRecord","Vote","idPropositionVote","nameProposal","id","UsersVote","VotesTallied","RegisterAddress","handleOptionChange","changeEvent","selectedOption","target","chooseAdminAction","getProposals","getProposalsByIdLength","length","getProposalsById","proposal","name","getOneProposal","idProposal","getCurrentStatus","className","Button","onClick","this","variant","type","checked","onChange","style","display","justifyContent","Card","width","Header","Body","Form","Group","controlId","ListGroup","Item","Table","striped","bordered","hover","map","Control","ref","input","isWhitelisted","currentAdressToLower","whitelist","showWinner","setAdresses","actionAdmin","showAdresses","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3deac8c5.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n\t  state = { \n\t  web3: null, \n\t  accounts: null, \n\t  contract: null, \n\t  Voting: null,\n\t  show : false, \n\t  isOwner : false,\n\t  currentAccount:null,\n\t  adminAdress : null,\n\t  stateVote:0,\n\t  winnerProposal:'',\n\t  proposals: [],\n\t  addressVote:[],\n\t  proposalVote:[],\n\t  chosenProposal: ''\n  };\n  \n  componentWillMount = async () => {\n  //componentDidMount = async () => {\n    try {\n      // Récupérer le provider web3  \n      const web3 = await getWeb3();\n\t  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract “Voting” avec web3 et les informations du déploiement du fichier (client/src/contracts/Whitelist.json)\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n  \n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\t  \t\t\t\t \n\t  const adminAdress = await instance.methods.getOwner().call();\n\t  const adminAdressLower = adminAdress.toString().toLowerCase();\n\t  const userAdress = accounts[0].toString().toLowerCase();\t\t\n\t  this.state.isOwner = adminAdressLower == userAdress;\t\t\n\t  \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ \n\t\tweb3, \n\t\taccounts, \n\t\tcontract: instance,\n\t\tadminAdress : adminAdress,\n\t\tcurrentAccount: accounts[0]\t},  \n\t\tthis.runExample, \n\t\tthis.runInit);\n\n\t\tthis.runExample();\n\t\tthis.runInit();\n\t\tthis.CheckOwnerWhenAccountChanged(userAdress);\t\t\n\t\t\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };   \n  \n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // store the current account\n    this.setCurrentAccount();\n\tthis.CheckIfOwner();\n  };\n\t\n  setCurrentAccount = async() => {\n\t\t\n\t\tawait window.ethereum.on('accountsChanged', (accounts) => {\n\n\t\t\t//this.setState({ currentAccount: accounts[0] });\t\t\t\n\t\t\t// this.currentUserAddress.value = this.state.currentAccount;\t\n\t\t\t\t\t\n\t\t\t//this.currentUserAddress.value = accounts[0];\t\n\t\t\t\n\t\t\tthis.CheckOwnerWhenAccountChanged(accounts[0]);\n\t\t});\n    };\n   \n  // Admin \n  runInit = async() => {\n\t  \n    const { accounts, contract } = this.state;\n\t\n\tconst countAdress = await contract.methods.getAddressCount().call();\n\t\t\n\tvar Voting = [];\n\t\n\tfor(let i = 0; i < countAdress; i++){\n\t\tconst adress = await contract.methods.getAddress(i).call();\n\t\tVoting.push(adress);\n\t}\n\t\t\n\tcontract.events.VoterRegistered({\n\t}, function(error, event){ console.log(event); })\n\t.on(\"connected\", function(subscriptionId){\n\t\tconsole.log(subscriptionId);\n\t})\n\t.on('data', function(event){\n\t\tconsole.log('call event'); // same results as the optional callback above\n\t})\n\t.on('changed', function(event){\n\t\t// remove event from local database\n\t})\n\t.on('error', function(error, receipt) { // If the transaction was rejected by the network with a receipt, the second parameter will be the receipt.\n\t\talert('error VoterRegistered');\n\t});\n\t\n    // Mettre à jour le state \n    this.setState({ Voting: Voting });\n\tthis.CheckIfOwner();\n  }; \n  \n  runVoteTalliedEnded = async(winnerProposal) => { \n\tif(this.winner != null)\n\t\tthis.winner.value = winnerProposal;\n  }; \n  \n  \n  runVoteTallied = async() => {\n   const { contract } = this.state;\n  \n    // // récupérer la proposition gagnante\n   const winnerVote = await contract.methods.UsersGetWinningProposal().call();\n   this.winner.value = winnerVote[1];\n  }; \n\n   Voting = async() => {\n     const { accounts, contract } = this.state;\n     const address = this.address.value;\n     //alert(address);\n     // Interaction avec le smart contract pour ajouter un compte \n     await contract.methods.AdminVoteRegisterAdress(address).send({from: accounts[0]});\n    \n     this.runInit();\n   }\n  \n  StopProposal = async() => {\n     const { accounts, contract } = this.state;\n    \n\t// // Interaction avec le smart contract \n\t// // pour arrêter la possibilité de faire des propositions\n     await contract.methods.AdminActions(2).send({from: accounts[0]});\n    \n     this.runInit();\n   }\n  \n  StartProposal = async() => {\n     const { accounts, contract } = this.state;\n    \n     // Interaction avec le smart contract \n\t // pour démarrer la possibilité de faire des propositions\n     await contract.methods.AdminActions(1).send({from: accounts[0]});\n    \n     this.runInit();\n   }\n  \n   StopVote = async() => {\n     const { accounts, contract } = this.state;\n    \n\t// Interaction avec le smart contract \n\t// pour arrêter la possibilité de faire des propositions\n     await contract.methods.AdminActions(4).send({from: accounts[0]});\n    \n     this.runInit();\n   }\n  \n  StartVote = async() => {\n     const { accounts, contract } = this.state;\n    \n    // // Interaction avec le smart contract \n\t// // pour démarrer la possibilité de faire des propositions\n     await contract.methods.AdminActions(3).send({from: accounts[0]});\n    \n     this.runInit();\n   }\n  \n  Proposal = async() => {\n\t  \n      const { accounts, contract } = this.state;\n\t  const userAddress = this.state.currentAccount;\n\t  const proposition = this.proposition.value;\n     // // Interaction avec le smart contract pour ajouter un compte \n      await contract.methods.UsersProposalsRecord(proposition).send({from: userAddress});\n      this.state.proposalVote[this.state.currentAccount] = true;\n      this.runInit();\n   }\n  \n   Vote = async(idPropositionVote, nameProposal) => {\n\t   \t   \n      const { accounts, contract } = this.state;\n      const address = this.state.currentAccount;\n\t  // // //const idPropositionVote = this.idPropositionVote.value;\n      const id = idPropositionVote;\n      // // // Interaction avec le smart contract pour ajouter un compte \n      await contract.methods.UsersVote(id).send({from: address});\n      this.state.addressVote[address]= true;\n\t  this.state.chosenProposal = nameProposal;\n      this.runInit();\n   }\n  \n   VotesTallied = async() => {   \n\t const { accounts, contract } = this.state;  \n     // Interaction avec le smart contract pour décompter les votes \n     await contract.methods.AdminActions(5).send({from: accounts[0]});\n     \n\t this.runVoteTallied();\n   } \n   \n   RegisterAddress = async() => {    \n      //const { accounts, contract } = this.state;  \n      // Interaction avec le smart contract pour décompter les votes \n    //  await contract.methods.AdminActions(0).send({from: accounts[0]});\n\t \n\t this.state.show = true;\n\t this.runInit();\n   } \n   \n   handleOptionChange = async(changeEvent) => {\n\t   this.setState({\n\t\t selectedOption: changeEvent.target.value\n\t   });\n\t   \t   \n\t   const { accounts, contract } = this.state;  \n\t   // Interaction avec le smart contract pour décompter les votes \n\t   await contract.methods.AdminActions(changeEvent.target.value).send({from: accounts[0]});\n\t   \n\t   this.CheckOwnerWhenAccountChanged(accounts[0]);\t  \n  }\n  \n  chooseAdminAction = async() => {\n\t   var stateVote = this.state.stateVote;\n\t   stateVote++;\n\t   //alert(stateVote);\n\t   const { accounts, contract } = this.state;  \n\t   // Interaction avec le smart contract pour décompter les votes \n\t   await contract.methods.AdminActions(stateVote).send({from: accounts[0]});\n\t   \n\t   this.CheckOwnerWhenAccountChanged(accounts[0]);\t  \n  }\n  \n  getProposals = async() => {    \n    const { accounts, contract } = this.state;  \n    // Interaction avec le smart contract pour décompter les votes \t\n\t\n\tconst length = await contract.methods.getProposalsByIdLength().call();\n\t\n\tfor (let i = 0; i < length; i++) {\n\t\tconst proposal = await contract.methods.getProposalsById(i).call(); \n\t\t\n\t\tthis.state.proposals[i]={id:i,name:proposal};\n\t\tvar prop = this.state.proposals[i];\n\t}\t\t\t\n\t \n\t this.runInit();\n   } \n   \n   getOneProposal = async(idProposal) =>{\n\t const { accounts, contract } = this.state;  \n\t return await contract.methods.getProposalsById(idProposal).call();\n   }\n   \n   CheckIfOwner = async() =>{\n\t  \t  \n\t\tconst { contract, isOwner} = this.state;  \n\t\t\n\t\tconst adminAdress = await contract.methods.getOwner().call();\n\t\tconst adminAdressLower = adminAdress.toString().toLowerCase();\n\t\tconst userAdress = this.state.currentAccount.toString().toLowerCase();\t\t\n\t\tthis.state.isOwner = adminAdressLower == userAdress;\t   \n   }\n   \n   CheckOwnerWhenAccountChanged = async(userAdress) =>{\n\t    //alert(userAdress);\n\t\tconst { contract, isOwner} = this.state;  \n\t    \n\t\tconst adminAdress = await contract.methods.getOwner().call();\n\t\t\n\t\tconst countAdress = await contract.methods.getAddressCount().call();\n\t\t\n\t\tvar Voting = []; \n\t\t\n\t\tfor(let i = 0; i < countAdress; i++){\n\t\t\tconst adress = await contract.methods.getAddress(i).call();\n\t\t\tVoting.push(adress);\n\t\t}\n\t\t\n\t\tvar stateVote = await contract.methods.getCurrentStatus().call();\n\t\t\n\t\tconst adminAdressLower = adminAdress.toString().toLowerCase();\n\t\tuserAdress = userAdress.toString().toLowerCase();\n\t\t\n\t\tthis.state.isOwner = adminAdressLower == userAdress;\n\t\tvar winnerProposal = '';\n\t\t\t\t\t\t\n\t\tif(stateVote == 3){\n\t\t\tthis.getProposals();\n\t\t}\n\t\t\n\t\t// décompte du vote\n\t\tif(stateVote == 5){\n\t\t\tconst winnerVote = await contract.methods.UsersGetWinningProposal().call();\n\t\t\t\n\t\t\twinnerProposal = winnerVote[1];\t\t\t\n\t\t}\n\t\t\n\t\tthis.setState({ \n\t\t\tisOwner: adminAdressLower == userAdress, \n\t\t\tVoting: Voting,\n\t\t\tcurrentAccount:userAdress,\n\t\t\tstateVote : stateVote,\t\n\t\t\twinnerProposal: winnerProposal\n\t\t});\t\n\t\t\n        if(stateVote == 5)\t\t\t\t\n\t\t\tthis.runVoteTalliedEnded(winnerProposal);\n\n\t\tthis.runExample();\n\t\tthis.runInit();\t\t\t\n   }\n   \n   actionAdmin(name) {\n\t return (\n\t\t<div>\n\t\t\t<h2 className=\"text-center\">Système de vote</h2>\n\t\t\t<hr></hr>\n\t\t\t<br></br>\n\t\t\t<Button onClick={ this.chooseAdminAction } variant=\"dark\" > {name} </Button>\n\t\t</div>\n\t );\n   }\n   \n   choicesAdmin() {\n\t return (\t\t\n\t\t<div className=\"App\">\n\t\t\t\t<div>\n\t\t\t\t\t<h2 className=\"text-center\">Système de vote</h2>\n\t\t\t\t\t<hr></hr>\n\t\t\t\t\t<br></br>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"admin\">\t  \n\t\t\t\t\t<div className=\"radio\">\n\t\t\t\t\t  <label>\n\t\t\t\t\t\t<input type=\"radio\" value=\"0\" \n\t\t\t\t\t\t\t\t\t  checked={this.state.selectedOption === '0'} \n\t\t\t\t\t\t\t\t\t  onChange={this.handleOptionChange} />\n\t\t\t\t\t\t Enregistrement des adresses\n\t\t\t\t\t  </label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"radio\">\n\t\t\t\t\t  <label>\n\t\t\t\t\t\t<input type=\"radio\" value=\"1\" \n\t\t\t\t\t\t\t\t\t  checked={this.state.selectedOption === '1'} \n\t\t\t\t\t\t\t\t\t  onChange={this.handleOptionChange} />\n\t\t\t\t\t\tDébut proposition\n\t\t\t\t\t  </label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"radio\">\n\t\t\t\t\t  <label>\n\t\t\t\t\t\t<input type=\"radio\" value=\"2\" \n\t\t\t\t\t\t\t\t\t  checked={this.state.selectedOption === '2'} \n\t\t\t\t\t\t\t\t\t  onChange={this.handleOptionChange} />\n\t\t\t\t\t\tFin de proposition\n\t\t\t\t\t  </label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"radio\">\n\t\t\t\t\t  <label>\n\t\t\t\t\t\t<input type=\"radio\" value=\"3\" \n\t\t\t\t\t\t\t\t\t  checked={this.state.selectedOption === '3'} \n\t\t\t\t\t\t\t\t\t  onChange={this.handleOptionChange} />\n\t\t\t\t\t\tDébut du vote\n\t\t\t\t\t  </label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"radio\">\n\t\t\t\t\t  <label>\n\t\t\t\t\t\t<input type=\"radio\" value=\"4\" \n\t\t\t\t\t\t\t\t\t  checked={this.state.selectedOption === '4'} \n\t\t\t\t\t\t\t\t\t  onChange={this.handleOptionChange} />\n\t\t\t\t\t\tFin du vote\n\t\t\t\t\t  </label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"radio\">\n\t\t\t\t\t  <label>\n\t\t\t\t\t\t<input type=\"radio\" value=\"5\" \n\t\t\t\t\t\t\t\t\t  checked={this.state.selectedOption === '5'} \n\t\t\t\t\t\t\t\t\t  onChange={this.handleOptionChange} />\n\t\t\t\t\t\tDépouillement \n\t\t\t\t\t  </label>\n\t\t\t\t\t</div>\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t )\n   }\n   \n   showWinner(){\n\t return(\n\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t   <Card style={{ width: '50rem' }}>\n\t\t\t <Card.Header><strong>Vote Results</strong></Card.Header>\n\t\t\t <Card.Body>\n\t\t\t   <Form.Group controlId=\"formAddress\">\n\t\t\t\t { this.state.winnerProposal}\n\t\t\t   </Form.Group>              \n\t\t\t </Card.Body>\n\t\t   </Card>\n\t\t </div>\n\t   \n\t   );\n   }\n   \n   showAdresses(){\n\t   const { Voting } = this.state;\n\t   return (\n\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t  <Card style={{ width: '50rem' }}>\n\t\t\t\t<Card.Header><strong>Liste des comptes autorisés</strong></Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t  <ListGroup variant=\"flush\">\n\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t  <Table striped bordered hover>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t  <tr>\n\t\t\t\t\t\t\t<th>@</th>\n\t\t\t\t\t\t  </tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\tVoting !== null && \n\t\t\t\t\t\t\tVoting.map((a) => <tr><td>{a}</td></tr>)\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t  </Table>\n\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t  </ListGroup>\n\t\t\t\t</Card.Body>\n\t\t\t  </Card>\n\t\t\t</div>\n\t\t);\n   }\n   \n   setAdresses(){\n\t const { Voting } = this.state;\n\t return (\n\t\t<div>\n\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t  <Card style={{ width: '50rem' }}>\n\t\t\t\t<Card.Header><strong>Authorized accounts</strong></Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t  <ListGroup variant=\"flush\">\n\t\t\t\t\t<ListGroup.Item>\n\t\t\t\t\t  <Table striped bordered hover>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t  <tr>\n\t\t\t\t\t\t\t<th>@</th>\n\t\t\t\t\t\t  </tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\tVoting !== null && \n\t\t\t\t\t\t\tVoting.map((a) => <tr><td>{a}</td></tr>)\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t  </Table>\n\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t  </ListGroup>\n\t\t\t\t</Card.Body>\n\t\t\t  </Card>\n\t\t\t</div>\n\t\t\t<br></br>\n\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t  <Card style={{ width: '50rem' }}>\n\t\t\t\t<Card.Header><strong>Autoriser un nouveau compte</strong></Card.Header>\n\t\t\t\t<Card.Body>\n\t\t\t\t  <Form.Group controlId=\"formAddress\">\n\t\t\t\t\t<Form.Control type=\"text\" id=\"address\"\n\t\t\t\t\tref={(input) => { this.address = input }}\n\t\t\t\t\t/>\n\t\t\t\t  </Form.Group>\n\t\t\t\t  <Button onClick={ this.Voting } variant=\"dark\" > Autoriser </Button>\n\t\t\t\t</Card.Body>\n\t\t\t  </Card>\n\t\t\t</div>\n\t\t</div>\n\t );\n   }\n\n  render() {\n    const { Voting } = this.state;\n\t\n    if (!this.state.web3) {\t  \n      return <div>Loading Web3, accounts, and contract...</div>;\n    } \n\t\n\tvar isWhitelisted = false;\n\tif(!this.state.isOwner && this.state.Voting != null &&  this.state.Voting.length > 0) { \n\t\tconst currentAdressToLower = this.state.currentAccount.toString().toLowerCase();\n\t\t\n\t\tconst whitelists = this.state.Voting.map((whitelist) =>\n\t\t{\n\t\t\tif(whitelist.toString().toLowerCase() === currentAdressToLower)\n\t\t\t\tisWhitelisted = true; \t\t\t\n\t\t});\t\t\n\t\t\n   }\n   \n   if(isWhitelisted){\n\t   // en attente d'ouverture des propositions\n\t   if(this.state.stateVote == 0) return (\n\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t  <Card style={{ width: '50rem' }}>\n\t\t\t\t <Card.Header><strong>The proposal session is not started yet</strong></Card.Header>\n\t\t\t  </Card>\n\t\t\t</div>\n\t   );\n\t   \n\t   if(this.state.stateVote == 1){\n\t\t   \n\t\t   // si l'utilisateur vient de faire une proposition\n\t\t   if(this.state.proposalVote[this.state.currentAccount]){\n\t\t\t\treturn(\n\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t\t\t<Card style={{ width: '50rem' }}>\n\t\t\t\t\t\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t Your proposition was sent to the blockchain\n\t\t\t\t\t   </Form.Group> \n\t\t\t\t\t   <Form.Group>\n\t\t\t\t\t\t { this.proposition.value}\n\t\t\t\t\t   </Form.Group>              \n\t\t\t\t\t</Card.Body>\n\t\t\t   </Card>\n\t\t\t </div>\n\t\t\t\t);\n\t\t   }\n\t\t   \n\t\t   return(\n\t\t\t <div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t\t   <Card style={{ width: '50rem' }}>\n\t\t\t\t\t <Card.Header><strong>The proposal session is opened</strong></Card.Header>\n\t\t\t\t\t <Card.Body>\n\t\t\t\t\t   <Form.Group controlId=\"formAddress\">\t\t\t\t\t\n\t\t\t\t\t\t Proposition : \n\t\t\t\t\t\t <Form.Control type=\"text\" id=\"proposition\"\n\t\t\t\t\t\t ref={(input) => { this.proposition = input }}\n\t\t\t\t\t\t />\n\t\t\t\t\t   </Form.Group>\n\t\t\t\t\t   <Button onClick={ this.Proposal } variant=\"dark\" > Add </Button>\n\t\t\t\t\t </Card.Body>\n\t\t\t\t   </Card>\n\t\t\t\t </div>\n\t\t\t);\n\t   }\n\t   \n\t   // proposition finie en attente d'ouverture du vote\n\t   if(this.state.stateVote == 2) return (\n\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t  <Card style={{ width: '50rem' }}>\n\t\t\t\t <Card.Header><strong>The vote session is not started yet</strong></Card.Header>\n\t\t\t  </Card>\n\t\t\t</div>\n\t   );\n\t   \n\t   // vote des propositions\n\t   if(this.state.stateVote == 3){\n\t\t   // si a déjà voté message\n\t\t   if(this.state.addressVote[this.state.currentAccount]){\n\t\t\t\treturn(\n\t\t\t\t\t<div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t\t\t<Card style={{ width: '50rem' }}>\n\t\t\t\t\t\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t  <Form.Group>\n\t\t\t\t\t\t Your vote was sent to the blockchain\n\t\t\t\t\t   </Form.Group> \n\t\t\t\t\t   <Form.Group>\n\t\t\t\t\t\t { this.state.chosenProposal}\n\t\t\t\t\t   </Form.Group>              \n\t\t\t\t\t</Card.Body>\n\t\t\t   </Card>\n\t\t\t </div>\n\t\t\t\t);\n\t\t   }\n\t\t   return (\n\t\t\t  <div style={{display: 'flex', justifyContent: 'center'}}>\n\t\t\t\t  <Card style={{ width: '50rem' }}>\n\t\t\t\t\t <Card.Header><strong>Vote</strong></Card.Header>\n\t\t\t\t\t <Card.Body>\n\t\t\t\t\t   <Table striped bordered hover>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t  <tr>\n\t\t\t\t\t\t\t<th>Propositions</th>\n\t\t\t\t\t\t  </tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t  {\n\t\t\t\t\t\t\tthis.state.proposals !== null && \n\t\t\t\t\t\t\tthis.state.proposals.map((a) => \n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>{a.name}</td>\n\t\t\t\t\t\t\t\t<td><Button onClick={() => this.Vote(a.id, a.name)} variant=\"dark\" > Envoyer </Button></td>\n\t\t\t\t\t\t\t</tr>)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t  </Table>\t\t\t\t\t   \n\t\t\t\t\t   \n\t\t\t\t </Card.Body>\n\t\t\t   </Card>\n\t\t\t </div>\n\t\t   );\n\t   }\n\t   if(this.state.stateVote == 4) return \"Waiting for vote Tallied\";\n\t   if(this.state.stateVote == 5){\t\t   \n\t\t   return (this.showWinner());\n\t   }\n   }\n   \n   if(this.state.isOwner && this.state.Voting != null) {\t   \n\t   var setAdresses = \"\";\n\t   var winner = \"\";\n\t   var actionAdmin = \"\";\n\t   \n\t\tif(this.state.stateVote == 0)\n\t\t\tactionAdmin = this.actionAdmin(\"Start proposals\");\n\t\t\n\t\tif(this.state.stateVote == 1)\n\t\t\tactionAdmin = this.actionAdmin(\"End proposal\");\n\t\t\t\n\t\tif(this.state.stateVote == 2)\n\t\t\tactionAdmin = this.actionAdmin(\"Start vote\");\n\t\t\n\t\tif(this.state.stateVote == 3)\n\t\t\tactionAdmin = this.actionAdmin(\"End vote\");\n\t\t\n\t\tif(this.state.stateVote == 4)\n\t\t\tactionAdmin = this.actionAdmin(\"Vote tallied\");\n\t   \n\t    if(this.state.stateVote == 0) setAdresses = this.setAdresses();\n\t    if(this.state.stateVote > 0) setAdresses = this.showAdresses();\n\t    if(this.state.stateVote == 5) winner = this.showWinner();\n\t\t\n\t\treturn (\n\t\t<div className=\"App\">\n\t\t  <div>{actionAdmin}</div>\n\t\t  <br />\n\t\t  <div>{setAdresses}</div>\n\t\t  <div>{winner}</div>\n\t\t</div>\n\t);\t\n   }\n   \n   \n   \n   return \"You are not whitelisted!\";\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}